{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib.pyplot import *\n",
    "from scipy.integrate import odeint\n",
    "import sympy as sp\n",
    "from scipy.integrate import quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp.init_printing(pretty_print=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFEAAAA1BAMAAADLxBpJAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAuzKrIkTNmVQQid12Zu/xd5rGAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACj0lEQVRIDc1Vz2vTUBz/NE3XpGm1uD/AogcPgusQEedhKYIIHtZ/QBrBixdXENvDBOdJGEMDgx3mDwrCEFQo7iQR7K2XMncVhO3oQdYxN8dgUt/vl5g2u+5B8v38yutL+963gBqpQcJQKQrOR1gSOcPNlbfXklLEM4o8UMfcMcl0iQf2MSPQqAcqwvh+bPKKmuK9QgJc9MOK6UlmfJaIV/vqbCSZnZd+Rep3pPJNKkxYlrJZNlyOF6UUTb6TcuXcBTHF8KTdBuxuB0voDwbioVjSplPkN4CctYVNOTWpseSlOlEdct3KephMSFpPd4jbI5d/qoNfMjkXBNtBsMaofKPMX0LbVKr5xi5eexTSEft0BEChRa0G8ltGjz1EaTy5WYXjU2scqTKshOTpIhZoEA9R20hMZvdwnyWXPjxxhyQn+2sd5sM8yNQ5wiqGJIVHy9kxl5asZ/8MJ9UOoSYftcusOp10K5wUbrg4e4xZvUek6ncPRwQulLVorh50NDs5KKEXRaydE7Lkiciq4kQvU/RELYxCsicO883m3ZLW01WN/0c3kNvX2k0NNRLbjvTobS3SXRQb4sj1fUy70rQ9icJVJK8D0yWp656IV49hi12ojjG+yiBeKoTWcxTEj6ySxpHyPypkzjeQLnKqkk6dClaV3NrAckDHJ5u0JtKfgHBjahIOrHukJ3Yo4iNziIkSh3LOApvSXNnlPVEEyVnGusAyuQDTJZL9G/ghY6SS1jQuqEgaLeR9KpEOE/5fyZZZm6SOSN5uNslXSsZM3WoxwG/2VJcff5WcHQz+MC91OMbmVumcJ6Bcp3QyR88kpLWBN/OCxxrTg3vCYeULpsI0gl+Uw3SxWw3TCHbcCB1B/gGR6wHiiXwVWwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{\\sqrt{y_{1}^{2} + 1}}{\\sqrt{- y + 2}}$$"
      ],
      "text/plain": [
       "   _________\n",
       "  ╱   2     \n",
       "╲╱  y₁  + 1 \n",
       "────────────\n",
       "   ________ \n",
       " ╲╱ -y + 2  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y, a, y1, y2, theta, v, m, g  = sp.symbols('x y a y1 y2 θ v m g')\n",
    "L = sp.symbols('L', cls=sp.Function)\n",
    "\n",
    "v = sp.solve(1/2 * m *v**2 - m*g*y, v)[1]  # from conservation of energy (keep positive solution)\n",
    "v = sp.sqrt(2-y)\n",
    "ds = sp.sqrt(1+y1**2)\n",
    "L = ds/v\n",
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGoAAAA7BAMAAABh3QL2AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAuzKrIkTNmVQQid12Zu/xd5rGAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADLUlEQVRIDdVWS2gTURS9yUw6mfxaWjcFsVFc+aFRd8XFiKLixq50IdosXAgiLRbjr9AsRYOMdCGiSKDgQgQDCrWMaMBFFT9UChYEMRtRsUj8LYpIvPf9ZjKdhCQrvZB3z7n3nHkvk9f3CuCPgVrjqPrFkoczErWTQ2mmNm9vs9uwreVaA4xSG66tXNs9rH9v3aX3cG3SbselDcsZYv4Vhmdla0XerSobbQUZmMot1xc87IzEer9AkXkBEg1dZla6dsJ6DqNlUWrsiuWFRO9dd5bDFlzXUXljAsxMqlartuK6RqKX+ClehqRwUKnpXOGPJCkB6PkcaD1EeDR1XRhAUaIMYMISpDCzMBzn0RfHyRAJfBsj8wBx6kaWYTBtviFI0XQuiOPq3pLMyMIr2PScIEVzV/IXwCzJQhnoA7hEkKK5C75BtEgyIxP507pr0uqyyWUOzf0McGlrfm+nti/2jx0UlVg2wOVTSxqqHmUwBzfzHpfavVJXnyM/2M8CD2EIG+pt1ItWsscWqxXmhjG37FrwPGjf6ISH/Yew8aHepPNPf8/NC+kO1tcbzXbgsq/mO3Dpi+kOXJbZ8OBu/DSzqnfggndP6C/CDcuFgUgPqibyQVVPLVJG0o37rIp5T66XtS6yscHARE/dpp6Bu7RS9+ZyewpxET/CWFGzIVVBZMwrjQcc5piLkmPICtM0R2oZNDz+IMX7vrHAuRB9RlYxqzhqJdDoP4sDvO8bhUuITmDXCle4Jk7ucxzTaM6VYYpT4UJComkqhmiFGINlHOg5ImLRCrzn2HWRiN1OJ4VqhvIDQTDtxbtoC6eui0R0RsbsImsZY5Q+4MqOOxRpG6/KJSydd5yvjnPPFQ0iHK2VWGGRjehSMWKH6QVhqLmY6Agv0oiX1i5Mx9wK5CBR4VS6uMhzim8AeIaS1R5XH92XLKSLi14rjT5zepxWyt6qqI4DXe0UwiVE7tHfhZs4i/1DJBIxdWfS4lC4hOi+FKgcTyuI4JYgcoWM6vzteXVsa/KCkTU/iZbYvaIulu21rVIkXtaKinjADg+W8IoEEH1xSmEv6PcSgfWA+etkSUvRv69KGeqNCgULAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{\\sqrt{y_{1}^{2} + 1}}{2 \\left(- y + 2\\right)^{\\frac{3}{2}}}$$"
      ],
      "text/plain": [
       "    _________\n",
       "   ╱   2     \n",
       " ╲╱  y₁  + 1 \n",
       "─────────────\n",
       "          3/2\n",
       "2⋅(-y + 2)   "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RHS = L.diff(y)\n",
    "RHS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALsAAAAxBAMAAABwlcXnAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZq4lU72YizbtEMt0MBTtrAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADgUlEQVRYCe2XT2gTQRTG3ybbJNsmadCKopfYiN4k1HoJWqPYkx6CFA89aCiIB0GiB70IRupB9NCAKEgPrhfxZKsUxEMxN8WDDf5BL9JoRfASUnqxoMY382Z2Z7o13RD25kBn3vfe732dbJbJLoDvsWkIjLxvumOwcBZizY67/DZYxRyYs8ZNv3yHnAEXIZp+u7fDNt94fBkWa3DeN98hGLZhDwRn35eHuQDtw/n4zwDtjdHMaoD2AD12gPY52FoM0P4rjALcmRmCYMZEphqM8X/XYK5AK8gR3M9DMBejW9dP12vdWrTrn4/Y7crd1lKbi91atOu3JgO9OBVjWfvvfe1ubI30I4ympdu/99Pln7mxq6rB86S2jB3W0l5R8aa0jKUpIRKzFGRhZL2ymwsV3XjdKJ7GdD9e6qZSNsUX/Qvui0gpsvB2jj7fmTV5TXJot5YiMS1y1zz2iS+sZOXhdBVXw8bpX4Og3pS3ftxJnXIiHgzk+C1gpiBawkS4rJdJvaKFoFgW1cRYlXJ8tmwpaLOoRAuEuH10GUx8fIGo5LR1gpSALqAqGU2FCBelmJYfTbQIe7MO5m9kXktOWwUroEdYqyTYZ5VjuwysfKJCsW6PuSTbz34J4teQScOAzhI0xpJ9VSrx+aSkpz+/E9v32C+mEWU7E6MnUoIpiiULwCD+6nBQYrgadXx04/TVVkvkZQtde0wuscJ3UcXlLj5qHyMpWYLYs31PqsBLBttsqKzRvCBbpH04y9JXcC+PG2zUUtE0vokAjDQalxuNb7yJQ4sYzrTqPPGRdSXxT9I8q7RI+0leQHtnLKQS7NvGIbcCHHpJSTZHzjVxHmShSzPltAj7SAHuYfYhr9GUg1CJImlPkPriw571oc4oTm+zWciGbBH2HwB2YvYpr9E0B/gmwodkCbpFSZobALECCxmdGKxTdq29tbRvmJX4TSeQYVgoUyjsBaQ9HE9VIZliFKcjdWpYa9+LR6CNpTeyjOvAiUMVksJeQD8UBvpngU5BTnvszWd/jih4sqYIGBdCXhwurbqKhFfhgdBIe+xVFGN+XlEubBuXRFWeT1zqp561Es+yNNGuvdYibHB57oTJtFlwhBLIs12kXvTyK0i0a680qOEOR0QGDzixGjxRBd7vR7kmekN7q6x3e1SMb9ZNJ9k5LseG9hL0vcbyLmqNr6Rd5UZ/AVdnTwUDyarIAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{y_{1}}{2 \\left(- y + 2\\right)^{\\frac{3}{2}} \\sqrt{y_{1}^{2} + 1}}$$"
      ],
      "text/plain": [
       "            y₁            \n",
       "──────────────────────────\n",
       "                 _________\n",
       "          3/2   ╱   2     \n",
       "2⋅(-y + 2)   ⋅╲╱  y₁  + 1 "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the derivative d(dL/dy')/dy\n",
    "# y1=y', y2=y''\n",
    "LHS1 = L.diff(y1,y)\n",
    "LHS1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ0AAABDBAMAAAB0PBq6AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMkR2q7uJ7yJUmWaekRE5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAD5klEQVRYCc1YS2gTQRj+t9l089p2VbDoQQLe9NCWrRaEYkERq4cGe9auCFUK1RxE24NQodDSS0MPihcNKB5EMXpRUWlB6EEs1qitB6XBQ9WDmOCjgmj9Z2dmd7LZPDbJoXPI//r+b2dmN99OAlB+zF2OlQd5QCSlrAd0eWhKTpYHeUEE6rteeOPl4uWxQS1RHlQZwn8SAtC61lYZujwq2KwdKo+qHHGvD05Vjq4AOQLniqP2acVrRSq74AY8dG+TLrS6F4pQmekOf1buc7Qd4w1nHAWeL2HnP0fB52ib43jvfFIqkKknn2IcgXryRVYSdeUjOyUPvucbRq2n/duok9GRzyBEr3X9lq53mhlP92OtcGSrmJ8wFXRdpd7TevP5XKW+Bj5B6rdF+aVq4ANT6lVkkgfanHzDdzsNnqvUmlIfIOhIAV+lHBRnSjOVegefpQeeCE1pplLv4PNEY4EFaa4LH3BpfjcxOTGREfbPuqQ3h0gzHfWZH0ozk/r68KE0M6knfOHpvwabbnVGkGZzftWx2F2CNJPvR83DVZprZXW+2mrkK5D6GvnWQXvhW6KWDHvDrIN1rd8pTJXY4Cr2T47Xd6mBbpNPunJeK0XcU2IVpGSt5CBlUUFtK8U3Vqoo1s7SoDkW/iGmHb486kiI4dO0fbUwAzZpBXxyu92kxGzf6YXjcM0q28CgY70t6Zzded92bY+9uBUNQkmetYH814c/w2qNAt9bjhctO/iEcqD84XnrrBq+yFIRgzkCnxRluTzD+JQ2UPje28AHcJiC3fjUWYtIGjKghUbWwQx8WVYPInDzIkjx8Nj+VzTnxreJwdEEI0n4RkObr9dgAAJMPIembMh6JN34rjI4midqFIZpaPN1YWIDSZ7GN/FsGpRREtDh4IuQRwFvvbTdPNl3ayEDbmJKPMirC3igvEPaCRDLiKFD1fU913U9TiJ6Pwaj6BkkZqNfk9nuW/P7iqUXU/hhAv056O1mYDT58wtvwWafXQVIQ2OSxpwvkoDHAP0ZBsQNGQTpI+/J5wNpFWCF14gdh4A5ffy1wNI9AMeRC9f6hWSwPA4HTrCiY34Ayylo5zVil8yZEI/xhbs+LCFX00+gQDXu/wfwjCDIcMwPZhZwPcJouYRXMAfja0C5imLiN1CgNDKEX5cCPmXyu/nfQCDXoNF+/jnNHL5eFi6nODAYdeHj3f5f89wlVo1Kt1nM9IBXZxaOmm4ats4KfJYecNyOndwj1mcoecu3a4EsBe7Go7XAZwOY9zIupiIDrlqDEP8qBc4NxTCy9k9sNn1fqiDlntgrAovzuTe7ZD8JuUeti0Jkuf8BQfF7U1ULersAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{- \\frac{y_{1}^{2}}{y_{1}^{2} + 1} + 1}{\\sqrt{- y + 2} \\sqrt{y_{1}^{2} + 1}}$$"
      ],
      "text/plain": [
       "           2           \n",
       "         y₁            \n",
       "     - ─────── + 1     \n",
       "         2             \n",
       "       y₁  + 1         \n",
       "───────────────────────\n",
       "              _________\n",
       "  ________   ╱   2     \n",
       "╲╱ -y + 2 ⋅╲╱  y₁  + 1 "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the derivative d(dL/dy')/dy'\n",
    "# y1=y', y2=y''\n",
    "LHS2 = L.diff(y1,y1)\n",
    "LHS2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\frac{y_{1}^{2} \\left(y_{1}^{2} + 1\\right) + 2 y_{2} \\left(- y + 2\\right) - \\left(y_{1}^{2} + 1\\right)^{2}}{2 \\left(- y + 2\\right)^{\\frac{3}{2}} \\left(y_{1}^{2} + 1\\right)^{\\frac{3}{2}}}$$"
      ],
      "text/plain": [
       "                                         2\n",
       "  2 ⎛  2    ⎞                   ⎛  2    ⎞ \n",
       "y₁ ⋅⎝y₁  + 1⎠ + 2⋅y₂⋅(-y + 2) - ⎝y₁  + 1⎠ \n",
       "──────────────────────────────────────────\n",
       "                               3/2        \n",
       "                  3/2 ⎛  2    ⎞           \n",
       "        2⋅(-y + 2)   ⋅⎝y₁  + 1⎠           "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# compute the right-hand side of the Lagrange\n",
    "# equation, i.e. y'*d(dL/dy')/dy + y''*d(dL/dy')/dy'\n",
    "# y1=y', y2=y''\n",
    "LHS = y1*LHS1 + y2*LHS2\n",
    "(LHS-RHS).simplify()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_param = theta - sp.sin(theta)\n",
    "y_param = 1 + sp.cos(theta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "dx = sp.diff(x_param, theta)\n",
    "dx2 = sp.diff(dx, theta)\n",
    "\n",
    "dy = sp.diff(y_param, theta)\n",
    "dy2 = sp.diff(dy, theta)\n",
    "\n",
    "dy_dx = dy/dx\n",
    "d2ydx2 = (dx*dy2-dy*dx2)/(dx)**3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAOBAMAAADkjZCYAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAiXaZIs1UEN1mu6tEMu+iw/3TAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAV0lEQVQIHWNgYBQyYWBgCGOocGDgbGBgXMDAtYGB7TsDvwEDzzeGeiD5k8FfgIH3E5j8yFAvwMDzCSTL9o2BawED53cGzgcMzAEMDG0MdRcYGAqV9jIAAMSUErnbiJtLAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$0$$"
      ],
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(LHS-RHS).subs({y:y_param,y1:dy_dx,y2:d2ydx2}).simplify().doit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFkAAAAqBAMAAAAqk+rzAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM3dMnbvmYlEVGYiu6uguUDoAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABY0lEQVQ4Ed2TMUjDUBRF76dJG0nSBAdHLYijKOjgZsBOWhykiIOzOCiNOARczKBQt85OGTs4CMU9IOJWFJxcVERwslEUjUv8UYRkaP7LJt4l7+aevLz8RwCaNGfcopEx1YUS0uk7YI1ON0z0fDJ+D/QsMs3B2Tyw9JaHLth5aCcPrOZq3Ybmk7tLLmSTTJ86Dj9yqiai6IXK/htObkRRZON8/4zySc3DvZMqBjZwQ1iC5Ml+HRg6xjZY86nfE4NTsaYBHfzf2zUxgxJKk3wcNvodWfFkfEquIC5/tAiObIKFMFra6+/dftcdBGAfUAOoppBmzwjBPqFXjgAlniRLcgXrwBg6tgvMmVkoz3QPj8DwSu3BgnYpgFNxF7WUzzTaVXUrE0iFxdTJpqI/YJb54t+pcygH7YW6RaXnsSqTYd70oizab+LN0m0h4URlyTNESCIfMY1WwgrKJRRdAZKIr1Hm9Bc8v1IZhxPBOgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$- \\pi a_{2} - \\frac{2}{\\pi}$$"
      ],
      "text/plain": [
       "        2\n",
       "-π⋅a₂ - ─\n",
       "        π"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a0 = 2  # from B.C.\n",
    "a1, a2, x = sp.symbols('a1 a2 x')\n",
    "y_parabolic = a0+a1*x+a2*x**2\n",
    "a1_prime = sp.solve(2+a1*sp.pi+a2*sp.pi**2, a1)[0]\n",
    "a1_prime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPAAAAAyBAMAAACQW0seAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpmJdkTvuxBm3VTNqzIaxHoRAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEWElEQVRYCa1YS4gcRRj+ZqYz0zO93TN6EYQlzQhBo8GBxYtgdgIiHmIyJ0Fy2JVAUDFkj/EVGhW8iDOIiHjZYQ9BGtSBeN/Bi94cMMgqhB314iNuHia44mOs7qrqru6u7qkaU4eu//8e9W9V11b1LqDX7J6W3jyvJS8Qf1vAyairngzVx+yOqqfU/mJKtNaQPO5A+1B5jGVUbgfiI8qOImHp3yI2we0AZwKgMUjACyYN5ZXGOQ+7LVLGem7BWgnb+4msMPkO2J0Gis8LZYrkaUUdlX0admvBvP9nM/Z1BnBuheolV8ck1zYmclyONtwQt7R+WvlQ16ZyXI62KWzSics1AmquXPGENBF+k8jmJHWXCV6eI2R0GeVhnvJsHiHDL6FEt9Wm2u5q9nJPCedPWYEczOnA8EKuPwi7eY+6l1u4cmOeWeDvbbfJr3LQqqpbsjIM9dlHbT2L5SJfzWZ/U7I2zBUliV+8ZB5l1Y0o1Akq19Pqux+6kIZIXjovAUOo7+YxhXg9vKUESWmC1Z6Qs3AZ39PowCBFXuumALWUnWBE/Aw12B6q6xlv6cLe/RS0uilye5QC1FLzJtd9RoPqPuzsPq3OZuydZApvTvkIev0/XM4K20PY5GIv3XesS5k3n3pnRZgULxzBJ1t8hKA3zs1mM1ewi2Qi/oNnrDBJG2RyT7dq7Bh3jcviqcULR/Cqx0cI+pVTR9/bE+0imYhf5FlcmGwX8/ngjHzjsR3UW8YNe8BF5NuhG8Yx/LAXk3BGRusEBLvApUKf53HhLaC8D/JB4+IwHNTGXIKy7198wfcnEODdkH3bD9onQA07op2QEQWQ10AaWVDSLobPw75/xvc/DuOySw60DfR7uI2DU6DZDWH24EsdwbRwJPkNw6Q9YlIBLUzAaMbvkqTfwSbwQVh4rWV6sSkqzOHEUgMPgkxItMfWZJRZaquDu9Af4VWrBTyKt3q7qAgWVjiGV4ksbuY+WSfBHjPpKLO5fgSexFK3vkXKOR9h+6dDOCWYWOEYPjkVWBhjnIZgF7lkfJanbKlLW+0jQ5iXjy6T3XmPh9cftx4YcQ3pWeEYTh4gtRG+Jrs6sgvOVJg+uZbIthszTWniJNYxgKN3zDTY7vEo3cvskcb8nYfR5uIAmfDeD16c0Sh7SQzSEp7L7JxD5pKIGBKQ409M5XHTleNz7NZfeTZVvDFWVSZ0RvYmSvDzE3t9vkaisK9LQC2ozi4TJdMTZOvS7bzgF5NQxdF4WZVHLv18YhqaD3aFMRYLo5Ngvv1XHDOmVKb4QV805qEiMs1t2B6F2Od1mtfJ13JPkOwozqTBwFtZUhdhf3gq2cqjJtVpbcmcoXXG6HtNuj56f1TnVCbXkWo7jmon1N6Jf0Vg01Oti1dg08KvKVsKhEt0rAJFhjqgc+pk3BxwnuWRcl8dKUuLhMeLSCl3RYpqg+y9qfussbq2UPlSIZslr3pZbCGk1tOymV/myf8DEUwHUoKjp4sAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$a_{2} x^{2} + x \\left(- \\pi a_{2} - \\frac{2}{\\pi}\\right) + 2$$"
      ],
      "text/plain": [
       "    2     ⎛        2⎞    \n",
       "a₂⋅x  + x⋅⎜-π⋅a₂ - ─⎟ + 2\n",
       "          ⎝        π⎠    "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_parabolic = y_parabolic.subs({a1:a1_prime})\n",
    "y_parabolic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIwAAAAqBAMAAACTq67+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAIpnNuzKriUQQ7912ZlSugimNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAByElEQVRIDe2UsUvDQBjFX0pjjSY2OBREh5BNRe3gptDJwcl2qCDuilhoF+ni0L+gBlFBcREEwaXdHBx0UReH7jrEydGKiBXEeElDko8gFO4WwW8I991793KX5BeAtyRzNs+bwdZnkOoIiNkAzgXENCyUdf6cTaAs4uEAV/ybYQnyl5CYQUNIjCkkRROzmWdIAl64XIFq8R9r1DTZp8NdOcd5A/4B/f1BCgV0eHvMv9Px7X7VJndVG47jGAgtRA0aBmj/CZb8T8hQS4lmoLmDan3rsRi1EDVoGKBHLUxCqa5Z0HT1ta8VaGwg26p+g4glKkbGDNAZCxdIgG1DRjLrasrcpVt5d5wE+9+GFiKm2YFZAS6gp1A6SNekd7Yofc0upJbBThm1ENVvGKAjH9Da0CwvZkdXLOqbRhtK1EJlr3MBPfxmR3kCUk3s1cpIUZvyiQ6U0EJVv/MAnceDUQFWLbysTKBOjWoWZ0Booarf5VxAD+4KpTykRWD3fmjKpsakjXVELFSNdxkU4pN0pgeLtFAcp4tiXQ8WDDhOO7aQTvRgoQv+aOfzz7v7Lv+8KT7/vDE+//wxHv/8MS7//OXxzx/T5Z87p8v/D9U3i/FuFESMAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$2 a_{2} x - \\pi a_{2} - \\frac{2}{\\pi}$$"
      ],
      "text/plain": [
       "                2\n",
       "2⋅a₂⋅x - π⋅a₂ - ─\n",
       "                π"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_prime = y_parabolic.diff(x)\n",
    "y_prime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "integrand = L.subs({y1:y_prime, y:y_parabolic}).simplify()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\frac{\\sqrt{\\left(\\pi a_{2} \\left(2 x - \\pi\\right) - 2\\right)^{2} + \\pi^{2}}}{\\sqrt{\\pi} \\sqrt{x \\left(- \\pi a_{2} x + \\pi^{2} a_{2} + 2\\right)}}$$"
      ],
      "text/plain": [
       "   ____________________________\n",
       "  ╱                     2    2 \n",
       "╲╱  (π⋅a₂⋅(2⋅x - π) - 2)  + π  \n",
       "───────────────────────────────\n",
       "      _________________________\n",
       "     ╱   ⎛           2       ⎞ \n",
       "√π⋅╲╱  x⋅⎝-π⋅a₂⋅x + π ⋅a₂ + 2⎠ "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "function = sp.lambdify((x,a2), integrand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum $a_2$ = 0.32\n"
     ]
    }
   ],
   "source": [
    "ai = np.linspace(0,5,1001)\n",
    "curr_min = 999\n",
    "for i in ai:\n",
    "    val = quad(function, 0, np.pi, args=(i,))[0]\n",
    "    if val < curr_min:\n",
    "        curr_min = val\n",
    "        a2_min = i\n",
    "print(f\"Minimum a2 = {a2_min}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum a1 = -1.64192942151631\n"
     ]
    }
   ],
   "source": [
    "a1_min = a1_prime.subs({a2:min_a2, sp.pi:np.pi})\n",
    "print(f\"Minimum a1 = {a1_min}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our parabolic function then becomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAASUAAAAVBAMAAADyROVdAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAiXaZIs1UEN1mu6tEMu+iw/3TAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAES0lEQVRIDc1Vz4tbVRg9ycvkzcvvdEBX0jgKFgo2GIciozVaF0oXExAFKzrRP8BEq1AUJ8FBGxm1AXXdqIuqtBrrwmrQCQhuumiKQhVRs5BWaHGiNJ1pmRrP9933kszEWQhC/CD33pzvfuecd+999wFbhJ1sFLdIjQ22YJXHJr6FcLwZuLZFamywU/z/eQJ85f9kQVqws/+WyLftdi25Z+oYsHfmeL/++5Ez7iHJZIuzvuVPECvzGRDI7CeWmZWaaNojkvTKQxW20UNM+JI3AKqjhUQ2h6HBwziYZcpO40g+UMf2pjsvcNQdeJ396bwoAvc3w2V2S1DEfgk/Z7EPvnUcTEV/ZWKyDiUyBZW164EXZlbp+zWcNDp9Ks7eEEoDpwxfjbj/Mkq5cBGxtjtpH75zR/1ul/H0IEI1FiwRJxJuI5QGl+p3fAW8R3BHHS6RFNS13E9PE2l8aHS0UHG3iVTNQGkQqiPI+YhcRDwXW0X4kskGjv+02y3od8aTTgd+eJQ4kXgOvg5WiljOdoHt3Ka363CJNnoqyCOpzoinYMqIKA3iaUQuG6BQ5Z6E3Rsg1ut1DDxoRYKP21Yk4Xoq1eC/xk3B8tmr1GrBN8F1MkQbPT2udUCBi2KoXADwPAlNCyV6uqK5yKvSTXbwzM4Xk3mFNjWGKP7Ytju5ddmhdVqXiYch69TEzfTEIJEqfz59F//J3nXP3NTkUHWEakjH88T0YWAugeifHCK680vpfkkh7T9hlWW8OYyn0iOI5fEAXE9ynuShyMLz9HE1UDWeSKSejmKuqZ7sbhXnPB2hGtIZeBIz4ukPI17Is1+Ek/VfClcNtLF1PXVgnUfC82RfxI+y+ZNpLDSjy3kfjKdFYqYgVDaeesAeWoHoMDOsM/BEGpQSiOg6QQ4mrDSiCOVY6cZzFYnX9Z+RiJfhrDtZzxMO3PiknMEM75PbrtvVest4IpHnyeJrI3u3BhxpEhUdUvV1rErljd8qlTpTSiNnPCiPGW0hxP5NweMpaUfDeJrMwblyL/qe+CAUccQDcPezKeNJiVjA57NoWTy9TE9VV0epBjr9dVIaXjUO56O0Kp6CCdwHnM7aRVXY1BhP3Apn/VSj8dcn3kJM1IAnEMhy+v5Io7F8IeESsSDGN7BjPL0v62R0zK4OdPqelMZpw8qRLKaXyhnglueby/ARGQ3jKcLz1GbyAn9Egucx10I0AX/xKfPdJhWESNNkitWMp9M8T66OFA7reJ6UBngFCy27C6fKeyOwmJktF87uwTfUGw0ScSbewUKeSd5GQu0/hA/4vclkTmJHMVQlGK9BiTQdSOPWovEUStjnjI5mhnU8T0oDPD3NO4AvydeZY5jo9Xq5A9PBO0RzJL5YWUrJTF+GFZjpvQtFklNNYL7X6/Iby4sL1vzVlBKZ9N7Z3UD4o7UTwNRsy+hoZljH86Q0I8LjATxP41H/Z9WI7LkXfwMrpmuWU+ONKwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$0.32 x^{2} - 1.64192942151631 x + 2$$"
      ],
      "text/plain": [
       "      2                         \n",
       "0.32⋅x  - 1.64192942151631⋅x + 2"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_parabolic = y_parabolic.subs({a1:a1_min, a2:a2_min})\n",
    "y_parabolic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "def y_para_func(x):\n",
    "    return 0.32*x**2 - 1.64193*x + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\sqrt{\\sin^{2}{\\left (θ \\right )} + 1} \\sqrt{- \\cos{\\left (θ \\right )} + 1}$$"
      ],
      "text/plain": [
       "   _____________                \n",
       "  ╱    2           _____________\n",
       "╲╱  sin (θ) + 1 ⋅╲╱ -cos(θ) + 1 "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "true_integral = L.subs({y1:dy, y:y_param})*dx\n",
    "true_integral"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The minimum time of transit is 0.79s\n"
     ]
    }
   ],
   "source": [
    "function = sp.lambdify(theta, true_integral)\n",
    "t = quad(function, 0, np.pi)[0]\n",
    "print(f\"The minimum time of transit is {round(t/np.sqrt(2*9.8), 2)}s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "dom = np.linspace(0, np.pi, 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Brachistochrone vs Parabola')"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(dom, y_para_func(dom), label=\"Brachistochrone\")\n",
    "plot(dom - np.sin(dom), 1 + np.cos(dom), label=\"Parabolic\")\n",
    "xlabel(\"x (m)\")\n",
    "ylabel(\"y (m)\")\n",
    "legend()\n",
    "grid()\n",
    "title(\"Brachistochrone vs Parabola\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The solutions are actually fairly different, at least from my first intuition. I would have expected the parabola to be the fastest method of descent. The Brachistochrone starts with a smaller slope and ends with a larger dip, appearing to curve up towards the end of travel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
